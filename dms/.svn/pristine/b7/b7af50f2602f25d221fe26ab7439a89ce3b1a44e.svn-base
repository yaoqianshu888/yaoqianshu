package com.landicorp.dms.util;

import java.io.File;
import java.text.MessageFormat;
import java.util.Date;
import java.util.Properties;
import java.util.Vector;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import com.landicorp.core.exception.BusinessException;

public class DmsMailSender {

	private final static String HOST = "mail.landicorp.com";
	private final static String AUTH = "true";
	private final static String USERNAME = "lams@landicorp.com";
	private final static String PASSWORD = "Tech3_App";
	private final static String DOMAINUSER = "landi\\lams";


	public static void sendMail(String fromName,String personalName,String[] to, String[] cc, String[] bcc, String subject, String content)
			throws Exception {
		send(fromName,personalName,to, cc, bcc, subject, content);
	}

	private static void send(String[] to, String[] cc, String[] bcc, String subject, String content) throws Exception {
		Properties props = new Properties();
		props.put("mail.smtp.host", HOST);
		props.put("mail.smtp.auth", AUTH);
		Session s = Session.getInstance(props);
		// s.setDebug(true);

		MimeMessage message = null;
		Transport transport = null;
		try {
			message = new MimeMessage(s);

			// 发件人设置
			InternetAddress from = new InternetAddress(USERNAME);
			message.setFrom(from);

			// 收件人设置
			InternetAddress[] Toaddress = new InternetAddress[to.length];
			for (int i = 0; i < to.length; i++)
				Toaddress[i] = new InternetAddress(to[i]);
			message.addRecipients(Message.RecipientType.TO, Toaddress);

			// 抄送设置
			if (cc != null) {
				InternetAddress[] Ccaddress = new InternetAddress[cc.length];
				for (int i = 0; i < cc.length; i++)
					Ccaddress[i] = new InternetAddress(cc[i]);
				message.addRecipients(Message.RecipientType.CC, Ccaddress);
			}

			// 隐藏抄送设置
			if (bcc != null) {
				InternetAddress[] Bccaddress = new InternetAddress[bcc.length];
				for (int i = 0; i < bcc.length; i++)
					Bccaddress[i] = new InternetAddress(bcc[i]);
				message.addRecipients(Message.RecipientType.BCC, Bccaddress);
			}

			// 邮件内容设置
			message.setSubject(subject);
			message.setSentDate(new Date());
			BodyPart mdp = new MimeBodyPart();
			mdp.setContent(content, "text/html;charset=utf-8");
			Multipart mm = new MimeMultipart();
			mm.addBodyPart(mdp);
			message.setContent(mm);

			message.saveChanges();

			// 发送
			transport = s.getTransport("smtp");
			transport.connect(HOST, (null == DOMAINUSER) ? USERNAME : DOMAINUSER, PASSWORD);
			transport.sendMessage(message, message.getAllRecipients());

		} catch (Exception e) {
			throw new BusinessException(e);
		} finally {
			if (transport != null) {
				try {
					transport.close();
				} catch (Exception e2) {
					throw new BusinessException(e2);
				}
			}
		}
	}

	/**
	 * @param addressee
	 *          收信人
	 * @param addresser
	 *          发信人
	 * @param subject
	 *          邮件标题
	 * @param contentText
	 *          邮件内容 files 附件
	 */
	@SuppressWarnings("unused")
	private static void sendEMail(String[] to, String[] cc, String[] bcc, String subject, String contentText,
			Vector<File> files) {
		try {
			// 创建Session
			Properties props = new Properties();
			props.put("mail.smtp.host", HOST);
			props.put("mail.smtp.auth", AUTH);
			Session s = Session.getInstance(props);
			// 创建message(包含了邮件众多有的部件的对象)
			MimeMessage message = new MimeMessage(s);
			// 设置发信人
			// message.setFrom(new InternetAddress(from));
			InternetAddress from = new InternetAddress(USERNAME);
			message.setFrom(from);
			// 设置收信人( 参数 BCC(blind carbon copy) CC(carbon copy) TO(primary))
			// message.setRecipient(Message.RecipientType.TO,new
			// InternetAddress(addressee));
			// 收件人设置
			InternetAddress[] Toaddress = new InternetAddress[to.length];
			for (int i = 0; i < to.length; i++)
				Toaddress[i] = new InternetAddress(to[i]);
			message.addRecipients(Message.RecipientType.TO, Toaddress);
			// 抄送设置
			if (cc != null) {
				InternetAddress[] Ccaddress = new InternetAddress[cc.length];
				for (int i = 0; i < cc.length; i++)
					Ccaddress[i] = new InternetAddress(cc[i]);
				message.addRecipients(Message.RecipientType.CC, Ccaddress);
			}
			// 隐藏抄送设置
			if (bcc != null) {
				InternetAddress[] Bccaddress = new InternetAddress[bcc.length];
				for (int i = 0; i < bcc.length; i++)
					Bccaddress[i] = new InternetAddress(bcc[i]);
				message.addRecipients(Message.RecipientType.BCC, Bccaddress);
			}
			// 设置邮件标题
			message.setSubject(subject);
			// 邮件内容(不含有附件)
			if (files == null) {
				message.setText(contentText);
			} else {
				// 创建 Mimemultipart添加内容(可包含多个附件)
				MimeMultipart multi = new MimeMultipart();
				// MimeBodyPart(用于信件内容/附件)
				BodyPart textBodyPart = new MimeBodyPart();
				textBodyPart.setText(contentText);
				// 添加到MimeMultipart对象中
				multi.addBodyPart(textBodyPart);
				// 创建FileDAtaSource(用于添加附件)
				for (int j = 0; j < files.size(); j++) {
					try {
						File file = files.elementAt(j);
						String fname = file.getName();
						FileDataSource fds = new FileDataSource(file);
						BodyPart fileBodyPart = new MimeBodyPart();
						// 字符流形式装入文件
						fileBodyPart.setDataHandler(new DataHandler(fds));
						fileBodyPart.setFileName(("=?GBK?B?" + new sun.misc.BASE64Encoder().encode(fname.getBytes()) + "?="));// 设置附件文件名
						multi.addBodyPart(fileBodyPart);
						message.setContent(multi);
					} catch (Exception er) {
						er.printStackTrace();
					}
				}
			}
			// 保存改变
			message.saveChanges();
			// 发送邮件(Transport类是SMTP的邮件发送协议)
			// Transport.send(message);
			// 发送
			Transport transport = s.getTransport("smtp");
			transport.connect(HOST, (null == DOMAINUSER) ? USERNAME : DOMAINUSER, PASSWORD);
			transport.sendMessage(message, message.getAllRecipients());
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	private static void send(String fromName,String personalName,String[] to, String[] cc, String[] bcc, String subject, String content) throws Exception {
		Properties props = new Properties();
		props.put("mail.smtp.host", HOST);
		props.put("mail.smtp.auth", AUTH);
		Session s = Session.getInstance(props);
		// s.setDebug(true);

		MimeMessage message = null;
		Transport transport = null;
		try {
			message = new MimeMessage(s);

			// 发件人设置
			InternetAddress from = new InternetAddress(fromName,personalName);
			message.setFrom(from);

			// 收件人设置
			InternetAddress[] Toaddress = new InternetAddress[to.length];
			for (int i = 0; i < to.length; i++)
				Toaddress[i] = new InternetAddress(to[i]);
			message.addRecipients(Message.RecipientType.TO, Toaddress);

			// 抄送设置
			if (cc != null) {
				InternetAddress[] Ccaddress = new InternetAddress[cc.length];
				for (int i = 0; i < cc.length; i++)
					Ccaddress[i] = new InternetAddress(cc[i]);
				message.addRecipients(Message.RecipientType.CC, Ccaddress);
			}

			// 隐藏抄送设置
			if (bcc != null) {
				InternetAddress[] Bccaddress = new InternetAddress[bcc.length];
				for (int i = 0; i < bcc.length; i++)
					Bccaddress[i] = new InternetAddress(bcc[i]);
				message.addRecipients(Message.RecipientType.BCC, Bccaddress);
			}

			// 邮件内容设置
			message.setSubject(subject);
			message.setSentDate(new Date());
			BodyPart mdp = new MimeBodyPart();
			mdp.setContent(content, "text/html;charset=utf-8");
			Multipart mm = new MimeMultipart();
			mm.addBodyPart(mdp);
			message.setContent(mm);

			message.saveChanges();

			// 发送
			transport = s.getTransport("smtp");
			transport.connect(HOST, (null == DOMAINUSER) ? USERNAME : DOMAINUSER, PASSWORD);
			transport.sendMessage(message, message.getAllRecipients());

		} catch (Exception e) {
			throw new BusinessException(e);
		} finally {
			if (transport != null) {
				try {
					transport.close();
				} catch (Exception e2) {
					throw new BusinessException(e2);
				}
			}
		}
	}

}
