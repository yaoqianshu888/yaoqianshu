package com.landicorp.dms.action.template;

import java.util.ArrayList;
import java.util.List;

import com.landicorp.core.action.BaseActionSupport;
import com.landicorp.dms.entities.Node;
import com.landicorp.dms.entities.Template;
import com.landicorp.dms.service.INodeService;
import com.landicorp.dms.service.ITemplateService;

public class TemplateDetailAction extends BaseActionSupport {
	private Template template;
	private ITemplateService templateService;
	private INodeService nodeService;
	private List<Node> nodeList;
	private List<List<Node>> nodeLists;
	private String jsonString;
	
	
	public String getJsonString() {
		return jsonString;
	}


	public void setJsonString(String jsonString) {
		this.jsonString = jsonString;
	}


	public List<List<Node>> getNodeLists() {
		return nodeLists;
	}


	public void setNodeLists(List<List<Node>> nodeLists) {
		this.nodeLists = nodeLists;
	}


	public List<Node> getNodeList() {
		return nodeList;
	}


	public void setNodeList(List<Node> nodeList) {
		this.nodeList = nodeList;
	}


	public INodeService getNodeService() {
		return nodeService;
	}


	public void setNodeService(INodeService nodeService) {
		this.nodeService = nodeService;
	}


	public Template getTemplate() {
		return template;
	}


	public void setTemplate(Template template) {
		this.template = template;
	}


	public ITemplateService getTemplateService() {
		return templateService;
	}


	public void setTemplateService(ITemplateService templateService) {
		this.templateService = templateService;
	}


	public String detailTemplate(){
		template=templateService.getById(template.getId());
		nodeList=nodeService.getAllNodesByTid(template.getId());
		nodeLists=new ArrayList<List<Node>>();
		for(int i=0;i<nodeList.size();i++){
			List<Node> nodes=nodeService.getAllNodeByPid(nodeList.get(i).getId());
			nodes.get(0).setTitleNo((i+1)+"");
			for(int j=0;j<nodes.size();j++){
				int c=1;
				for(int k=1;k<nodes.size();k++){
					if(nodes.get(k).getUpNode().getId().equals(nodes.get(j).getId())){
						nodes.get(k).setTitleNo(nodes.get(j).getTitleNo()+"."+c);
						c++;
					}
				}
			}
			
			nodeLists.add(nodes);
		}
		
		return "detail";
	}
	
	public String viewTemplate(){
		nodeLists=new ArrayList<List<Node>>();
		nodeList=new ArrayList<Node>();
		if(jsonString!=null && !jsonString.equals("")){
			String split[]=jsonString.split("◆");
			for(int k=0;k<split.length;k++){
				String split1[]=split[k].split("★");
				List<Node> nList= new ArrayList<Node>();
				for(int i=0;i<split1.length;i++){
					String split2[]=split1[i].split("☆");
					Node nodeCopy=new Node();
					nodeCopy.setId(Integer.valueOf(split2[0]));
					Node upNode=new Node();
					upNode.setId(Integer.valueOf(split2[1]));
					nodeCopy.setUpNode(upNode);
					nodeCopy.setTitle(split2[2]);
					
					if(split2[3].equals("(标题节点)")){
						nodeCopy.setNodeFormat(1);
					}else if(split2[3].equals("(文本节点)")){
						nodeCopy.setNodeFormat(2);
					}else if(split2[3].equals("(图文节点)")){
						nodeCopy.setNodeFormat(3);
					}else if(split2[3].equals("(请求参数节点)")){
						nodeCopy.setNodeFormat(4);
					}else if(split2[3].equals("(返回参数节点)")){
						nodeCopy.setNodeFormat(5);
					}else if(split2[3].equals("(请求报文节点)")){
						nodeCopy.setNodeFormat(6);
					}else if(split2[3].equals("(返回报文节点)")){
						nodeCopy.setNodeFormat(7);
					}else {
						nodeCopy.setNodeFormat(0);
					}
					
					if(i==0){
						nodeList.add(nodeCopy);
					}
					nList.add(nodeCopy);
				}
				
				nList.get(0).setTitleNo((k+1)+"");
				for(int j=0;j<nList.size();j++){
					int c=1;
					for(int a=1;a<nList.size();a++){
						if(nList.get(a).getUpNode().getId().equals(nList.get(j).getId())){
							nList.get(a).setTitleNo(nList.get(j).getTitleNo()+"."+c);
							c++;
						}
					}
				}
				
				nodeLists.add(nList);
			}
		}
		
	
		return "detail";
	}
	
	
}
