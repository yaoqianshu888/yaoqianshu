package com.landicorp.dms.action.draft;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;

import com.landicorp.core.action.BaseActionSupport;
import com.landicorp.dms.entities.BasicNodeCont;
import com.landicorp.dms.entities.Document;
import com.landicorp.dms.entities.Draft;
import com.landicorp.dms.entities.Function;
import com.landicorp.dms.entities.Module;
import com.landicorp.dms.entities.Node;
import com.landicorp.dms.service.IBasicNodeContService;
import com.landicorp.dms.service.IDocumentService;
import com.landicorp.dms.service.IDraftService;
import com.landicorp.dms.service.IFunctionService;
import com.landicorp.dms.service.IModuleService;
import com.landicorp.dms.service.INodeService;

public class DraftUpdateAction extends BaseActionSupport{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Function function;
	private IFunctionService functionService;
	private List<Node> nodeList;
	private List<List<Node>> nodeLists;
	private INodeService nodeService;
	private Map<Integer, String> map;
	private IBasicNodeContService basicNodeContService;
	private Document document;
	private IDocumentService documentService;
	private Module module;
	private IModuleService moduleService;
	private Node node;
	private BasicNodeCont basicNodeCont;
	private Draft draft;
	private IDraftService draftService;
	

	public Draft getDraft() {
		return draft;
	}


	public void setDraft(Draft draft) {
		this.draft = draft;
	}


	public IDraftService getDraftService() {
		return draftService;
	}


	public void setDraftService(IDraftService draftService) {
		this.draftService = draftService;
	}


	public Function getFunction() {
		return function;
	}


	public void setFunction(Function function) {
		this.function = function;
	}


	public IFunctionService getFunctionService() {
		return functionService;
	}


	public void setFunctionService(IFunctionService functionService) {
		this.functionService = functionService;
	}


	public List<Node> getNodeList() {
		return nodeList;
	}


	public void setNodeList(List<Node> nodeList) {
		this.nodeList = nodeList;
	}


	public List<List<Node>> getNodeLists() {
		return nodeLists;
	}


	public void setNodeLists(List<List<Node>> nodeLists) {
		this.nodeLists = nodeLists;
	}


	public INodeService getNodeService() {
		return nodeService;
	}


	public void setNodeService(INodeService nodeService) {
		this.nodeService = nodeService;
	}


	public Map<Integer, String> getMap() {
		return map;
	}


	public void setMap(Map<Integer, String> map) {
		this.map = map;
	}


	public IBasicNodeContService getBasicNodeContService() {
		return basicNodeContService;
	}


	public void setBasicNodeContService(IBasicNodeContService basicNodeContService) {
		this.basicNodeContService = basicNodeContService;
	}


	public Document getDocument() {
		return document;
	}


	public void setDocument(Document document) {
		this.document = document;
	}


	public IDocumentService getDocumentService() {
		return documentService;
	}


	public void setDocumentService(IDocumentService documentService) {
		this.documentService = documentService;
	}


	public Module getModule() {
		return module;
	}


	public void setModule(Module module) {
		this.module = module;
	}


	public IModuleService getModuleService() {
		return moduleService;
	}


	public void setModuleService(IModuleService moduleService) {
		this.moduleService = moduleService;
	}


	public Node getNode() {
		return node;
	}


	public void setNode(Node node) {
		this.node = node;
	}


	public BasicNodeCont getBasicNodeCont() {
		return basicNodeCont;
	}


	public void setBasicNodeCont(BasicNodeCont basicNodeCont) {
		this.basicNodeCont = basicNodeCont;
	}


	public String prepare() {
		draft=draftService.getById(draft.getId());
		function=functionService.getById(draft.getFunction().getId());
		document=documentService.getById(draft.getDocument().getId());
		
		if(document!=null && document.getTemplate()!=null){
			List<Node> rootNodes=nodeService.getAllNodesByTidAndType1(document.getTemplate().getId());
			Node firstNode=new Node();
			if(rootNodes.size()>0){
				firstNode=rootNodes.get(0);
				nodeList=nodeService.getAllFirstNodeByPid(firstNode.getId());
				nodeLists=new ArrayList<List<Node>>();
				for(int i=0;i<nodeList.size();i++){
					List<Node> nodes=nodeService.getAllNodeByPid(nodeList.get(i).getId());
					nodes.get(0).setTitleNo((i+1)+"");
					for(int j=0;j<nodes.size();j++){
						int c=1;
						for(int k=1;k<nodes.size();k++){
							if(nodes.get(k).getUpNode().getId().equals(nodes.get(j).getId())){
								nodes.get(k).setTitleNo(nodes.get(j).getTitleNo()+"."+c);
								c++;
							}
						}
					}
					
					nodeLists.add(nodes);
				}
			}
			
			//内容传值
			map=new HashMap<Integer, String>();
			List<BasicNodeCont> basicNodeContList=basicNodeContService.getByDocumentIdAndFunctionId(document.getId(),function.getId());
			for(int i=0;i<basicNodeContList.size();i++){
				map.put(basicNodeContList.get(i).getNode().getId(), basicNodeContList.get(i).getContent());
			}
		}
		return INPUT;
	}
	
	public String updateDraft()throws IOException{
		HttpServletRequest request=ServletActionContext.getRequest();
		request.setCharacterEncoding("UTF-8"); 
		String operationType="";   //是否为保存到草稿操作  1为保存
		//修改基本节点内容
		 Map<String,String[]> map = request.getParameterMap();
	     for(Entry<String, String[]> me : map.entrySet()){
	       String name = me.getKey();
	       String [] v = me.getValue();
	       if(name.equals("function.module.id")){
	    	   Module module1 =new Module();
	    	   module1.setId(Integer.valueOf(v[0]));
	    	   module=moduleService.getById(module1.getId());
	    	   function.setModule(module1);
	       }else if(name.equals("function.functionName")){
	    	   function.setFunctionName(v[0]);
	       }else if(name.equals("function.urlPath")){
	    	   function.setUrlPath(v[0]);
	       }else if(name.equals("function.memo")){
	    	   function.setMemo(v[0]);
	       }else if(name.equals("document.id")){
	    	   document=documentService.getById(document.getId());
	       }else if(name.equals("function.id")){
	    	   function.setId(Integer.valueOf(v[0]));
	       }else if(name.equals("draft.id")){
	    	   draft.setId(Integer.valueOf(v[0]));
	       }else if(name.equals("operationType")){
	    	   operationType=v[0];
	       }else
	       {
	    	   BasicNodeCont basicNodeCont=new BasicNodeCont();
		       basicNodeCont.setDocument(document);
		       basicNodeCont.setFunction(function);
		       String[] id=name.split("_");
		       System.out.println(name);
		       Node node1=new Node();
		       node1.setId(Integer.valueOf(id[1]));
		       basicNodeCont.setNode(node1);
		       StringBuffer sb=new StringBuffer("");
	    	   for(int i=0;i<v.length;i++){
	    		   if((i+1)%4==0){
	    			   sb.append(v[i]+"☆");
	    		   }else {
	    			   sb.append(v[i]+"★");
	    		   }
		       }
	    	   if(sb.length()>0){
					sb.deleteCharAt(sb.length()-1);
			   }
	    	   basicNodeCont.setContent(sb.toString());
	    	   basicNodeCont.setModule(function.getModule());
	    	   basicNodeContService.updateContentFunction(basicNodeCont);   //修改内容节点
	       }
	       
	     }
	     if(!operationType.equals("1")){
	    	 function.setOperationType(1);   //审核通过
		     draftService.deleteById(draft.getId());
	     }
	     
	     functionService.update(function);
	     setWindowReturnValue("ok");
		return "update";
	}

}
