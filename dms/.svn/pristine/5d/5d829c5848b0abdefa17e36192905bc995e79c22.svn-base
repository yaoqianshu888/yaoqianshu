package com.landicorp.dms.action.document;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;

import com.landicorp.core.action.BaseActionSupport;
import com.landicorp.dms.entities.BasicNodeCont;
import com.landicorp.dms.entities.Document;
import com.landicorp.dms.entities.DocumentModule;
import com.landicorp.dms.entities.Function;
import com.landicorp.dms.entities.Module;
import com.landicorp.dms.entities.Node;
import com.landicorp.dms.service.IBasicNodeContService;
import com.landicorp.dms.service.IDocumentModuleService;
import com.landicorp.dms.service.IDocumentService;
import com.landicorp.dms.service.IFunctionService;
import com.landicorp.dms.service.INodeService;

public class DocumentMenuAction extends BaseActionSupport {

	private Document document;
	private IDocumentService documentService;
	private List<Node> nodeList;
	private INodeService nodeService;
	private IDocumentModuleService documentModuleService;
	private List<DocumentModule> documentModulelList;
	private IFunctionService functionService;
	private List<Function> functionList;
	private List<List<Node>> nodeLists;
	private Map<Integer, String> map;
	private IBasicNodeContService basicNodeContService;
	
	
	public List<List<Node>> getNodeLists() {
		return nodeLists;
	}


	public void setNodeLists(List<List<Node>> nodeLists) {
		this.nodeLists = nodeLists;
	}


	public Map<Integer, String> getMap() {
		return map;
	}


	public void setMap(Map<Integer, String> map) {
		this.map = map;
	}


	public IBasicNodeContService getBasicNodeContService() {
		return basicNodeContService;
	}


	public void setBasicNodeContService(IBasicNodeContService basicNodeContService) {
		this.basicNodeContService = basicNodeContService;
	}


	public IFunctionService getFunctionService() {
		return functionService;
	}


	public void setFunctionService(IFunctionService functionService) {
		this.functionService = functionService;
	}


	public List<Function> getFunctionList() {
		return functionList;
	}


	public void setFunctionList(List<Function> functionList) {
		this.functionList = functionList;
	}


	public IDocumentModuleService getDocumentModuleService() {
		return documentModuleService;
	}


	public void setDocumentModuleService(
			IDocumentModuleService documentModuleService) {
		this.documentModuleService = documentModuleService;
	}


	

	public List<DocumentModule> getDocumentModulelList() {
		return documentModulelList;
	}


	public void setDocumentModulelList(List<DocumentModule> documentModulelList) {
		this.documentModulelList = documentModulelList;
	}


	public Document getDocument() {
		return document;
	}


	public void setDocument(Document document) {
		this.document = document;
	}


	public IDocumentService getDocumentService() {
		return documentService;
	}


	public void setDocumentService(IDocumentService documentService) {
		this.documentService = documentService;
	}


	public List<Node> getNodeList() {
		return nodeList;
	}


	public void setNodeList(List<Node> nodeList) {
		this.nodeList = nodeList;
	}


	public INodeService getNodeService() {
		return nodeService;
	}


	public void setNodeService(INodeService nodeService) {
		this.nodeService = nodeService;
	}

	public String showDocument(){  //跳转到显示页面
		document=documentService.getById(document.getId());
		
		return "menu";
	}

	public void getMenus() throws IOException{   //获取显示目录
		HttpServletResponse response = ServletActionContext.getResponse(); 
		response.setCharacterEncoding("UTF-8");
		document=documentService.getById(document.getId());
		nodeList=nodeService.getAllNodesByTid(document.getTemplate().getId());
		
		StringBuffer sb=new StringBuffer("[");
		int count=0; //显示标题号数
		for(int i=0;i<nodeList.size();i++){
			if(nodeList.get(i).getNodeType()!=null && nodeList.get(i).getNodeType()==0){   //当为功能节点的时候
				List<Node> nodes=nodeService.getAllNodeByPid(nodeList.get(i).getId());
				int num=1000;
				documentModulelList=documentModuleService.getByDocumentId(document.getId());
				for(int k=0;k<documentModulelList.size();k++){
					if(documentModulelList.get(k).getModule().getAvailable()==1){  //模块有效时
					
					functionList=functionService.getAllFunctionByModuleId(documentModulelList.get(k).getModule().getId());
					for(int t=0;t<functionList.size();t++){
						nodes.get(0).setTitleNo((count+1)+"");
						for(int j=0;j<nodes.size();j++){
							int c=1;
							for(int m=1;m<nodes.size();m++){
								if(nodes.get(m).getUpNode().getId().equals(nodes.get(j).getId())){
									nodes.get(m).setTitleNo(nodes.get(j).getTitleNo()+"."+c);
									c++;
								}
							}
						}
						count++;
						//-1为每个模板的节点id
						for(int j=0;j<nodes.size();j++){
								if(nodes.get(j).getUpNode()==null){
									sb.append("{\"id\":\""+num+nodes.get(j).getId()+"\",\"pId\":\"-1\",\"name\":\""+functionList.get(t).getFunctionName()+"\",\"no\":\""+nodes.get(j).getTitleNo()+"\"},");
								}else{
									sb.append("{\"id\":\""+num+nodes.get(j).getId()+"\",\"pId\":\""+num+nodes.get(j).getUpNode().getId()+"\",\"name\":\""+nodes.get(j).getTitle()+"\",\"no\":\""+nodes.get(j).getTitleNo()+"\"},");
								}
						}
						num=num*2;
					}
				  }
				}
			}else {   
				List<Node> nodes=nodeService.getAllNodeByPid(nodeList.get(i).getId());
				
				nodes.get(0).setTitleNo((count+1)+"");
				for(int j=0;j<nodes.size();j++){
					int c=1;
					for(int k=1;k<nodes.size();k++){
						if(nodes.get(k).getUpNode().getId().equals(nodes.get(j).getId())){
							nodes.get(k).setTitleNo(nodes.get(j).getTitleNo()+"."+c);
							c++;
						}
					}
				}
				count++;
				
				//-1为每个模板的节点id
				for(int j=0;j<nodes.size();j++){
						if(nodes.get(j).getUpNode()==null){
							sb.append("{\"id\":\""+nodes.get(j).getId()+"\",\"pId\":\"-1\",\"name\":\""+nodes.get(j).getTitle()+"\",\"no\":\""+nodes.get(j).getTitleNo()+"\"},");
						}else{
							sb.append("{\"id\":\""+nodes.get(j).getId()+"\",\"pId\":\""+nodes.get(j).getUpNode().getId()+"\",\"name\":\""+nodes.get(j).getTitle()+"\",\"no\":\""+nodes.get(j).getTitleNo()+"\"},");
						}
				}
			}
		}
		
		if(sb.length()>1){
			sb.deleteCharAt(sb.length()-1);
		}
		sb.append("]");
		//System.out.println(sb.toString());
		response.getWriter().write(sb.toString());
	}
	
	
}
